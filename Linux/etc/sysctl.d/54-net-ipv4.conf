#!/usr/bin/env -S sysctl -p
## This file contains settings which are related to ipv4 networking, yet not particularly related to security.
## Documentation:  https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
## Copyright Â© by Miles Bradley Huff from 2016-2024 per the LGPL3 (the Third Lesser GNU Public License)

## Prevents being used as a router.  Comment if router.  Has to come first, before other network settings.
net.ipv4.ip_forward=0

## CIPSO settings
net.ipv4.cipso_cache_enable=1
net.ipv4.cipso_rbm_optfmt=1
#net.ipv4.cipso_rbm_structvalid=0

## ARP settings
net.ipv4.conf.all.app_solicit=2
net.ipv4.conf.all.arp_accept=0
net.ipv4.conf.all.arp_announce=2
net.ipv4.conf.all.arp_filter=1
net.ipv4.conf.all.arp_ignore=1
net.ipv4.conf.all.mcast_resolicit=2
net.ipv4.conf.all.proxy_arp=0
net.ipv4.conf.all.proxy_arp_pvlan=0

## Prevents failed nexthops.
net.ipv4.fib_multipath_use_neigh=1

## Beneficial, and lets the below work properly.
net.ipv4.tcp_window_scaling=1
net.ipv4.tcp_moderate_rcvbuf=1
## Set default to average expected network speed.  This is decisively 256960 throughout the USA.
## Go to link for more info:  http://www.speedguide.net/analyzer.php
; net.core.rmem_default=256960
; net.core.wmem_default=256960
## Min is one page, default is as above, max is 6MB for rmem, 4MB for wmem.
; net.ipv4.tcp_rmem=4096 256960 6291456
; net.ipv4.tcp_wmem=4096 256960 4194304

## Can cause problems if enabled
net.ipv4.tcp_abort_on_overflow=0

## Merge smaller packets together
net.ipv4.tcp_autocorking=1
## Demuxes certain TCP packets
net.ipv4.ip_early_demux=1

## Best congestion algorithm (commented because it's the default now)
# net.ipv4.tcp_congestion_control=cubic
## Allow communication of congestion
net.ipv4.tcp_ecn=2
net.ipv4.tcp_ecn_fallback=1
## Only particularly useful at high speeds;  can improve congestion-algorithm efficacy.
net.ipv4.tcp_timestamps=0

## If enabled, can cause unreliable profiling that actually slows stuff down.
net.ipv4.tcp_no_metrics_save=1
## If enabled, the TCP stack deliberately slows itself down after an RTO.
net.ipv4.tcp_slow_start_after_idle=0
## Benchmarks of the above two tweaks:
## https://github.com/ton31337/tools/wiki/tcp_slow_start_after_idle---tcp_no_metrics_save-performance

## Allows opening packets before completing the 3-way handshake.  Improves latency.
## 0b 0110 000 0011  (decimal: 1539)
##    ||       ||^ Enable client-support
##    ||       |^ Enable server-support
##    ||       ^ Send TFO requests regardless of cookie-availability
##    |^ Accept TFO without cookies
##    ^ Enable TFO on all listening sockets
## May have security implications though.
# net.ipv4.tcp_fastopen=1539
# net.ipv4.tcp_fastopen_key=b0ca13e1-3b777679-62fdfcf2-44af6bed
## Doesn't actually improve latency to enable.
## Should be left disabled, because enabling disables useful algorithms.
net.ipv4.tcp_low_latency=0
## Better latency
net.ipv4.tcp_thin_linear_timeouts=1
net.ipv4.tcp_thin_dupack=1

## Helps recover if primary address is lost
net.ipv4.conf.all.promote_secondaries=1
## Recover from lost packets faster
net.ipv4.tcp_early_retrans=3
## Helps recover some packets and such
net.ipv4.tcp_frto=1
net.ipv4.tcp_recovery=1

## Support for dynamic addresses
net.ipv4.ip_dynaddr=1
## Possibly useful, but can break things, and it has security implications.
# net.ipv4.ip_nonlocal_bind=1
## I don't really know what this is, but it's useful.  I think.
net.ipv4.tcp_l3mdev_accept=1

## Helps with connection fidelity
net.ipv4.tcp_mtu_probing=1

## Compatibility with certain bugged devices.  Enabled by default and apparently harmless.
net.ipv4.tcp_retrans_collapse=1
## Compatibility with BSD and other devices.  Disabled=compatible.  No benefit to enabling.
net.ipv4.tcp_stdurg=0
## Probably an unnecessary workaround.
net.ipv4.tcp_workaround_signed_windows=1

## SACK-related features
net.ipv4.tcp_sack=1
net.ipv4.tcp_dsack=1
net.ipv4.tcp_fack=1

## Can give speed bonuses on some networks.  reuse is generally safer than recycle.  Don't use both.  Don't use either on untrusted networks.
# net.ipv4.tcp_tw_reuse=1
# net.ipv4.tcp_tw_recycle=0

## Redirects
## Generally, disable redirects unless you're on a PC.
net.ipv4.conf.all.accept_redirects=1
## Routers enable, everyone else disable.
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.all.send_redirects=0
## Prevents harm from IP-spoofing
net.ipv4.conf.all.secure_redirects=1
net.ipv4.conf.all.rp_filter=2
## Practicality (disable if not PC)
net.ipv4.conf.all.shared_media=1
# net.ipv4.conf.all.route_localnet=1
## Optional
net.ipv4.conf.all.accept_local=1
## Unimplemented
net.ipv4.conf.all.bootp_relay=0

## Recommended by RFC, but might cause compatibility problems
net.ipv4.conf.all.drop_unicast_in_l2_multicast=1

## Secure redirects only
net.ipv4.conf.all.secure_redirects=1

## For use with firewall (netfilter) marks
## I don't see any reason not to have this enabled.
net.ipv4.fwmark_reflect=1

## Prevents ping-attacks, but disables being ping'ed.  Inappropriate for most servers.
net.ipv4.icmp_echo_ignore_all=1

## Prevent Smurf-attacks
net.ipv4.icmp_echo_ignore_broadcasts=1

## Prevent DoS attacks
## In milliseconds.  These two should probably be the same.
net.ipv4.icmp_ratelimit=250
net.ipv4.tcp_challenge_ack_limit=250
## Determines which ICMP messages are ratelimited.
## ICMP requests:  IHG FEDC BA98 7654 3210
## Current mask:   101 0101 1000 0001 1001
## The 1s indicate which messages are limited.
## This mask is then converted to decimal and passed to sysctl.
## Definitions of ICMP message types:  (*=masked)
##   0 Echo Reply              * (limit to reduce severity of ping attacks)
##   3 Destination Unreachable * (limited by default)
##   4 Source Quench           * (limited by default)
##   5 Redirect
##   8 Echo Request              (limiting would only prevent us from being able to launch our own ping attacks)
##   B Time Exceeded           * (limited by default)
##   C Parameter Problem       * (limited by default)
##   D Timestamp Request
##   E Timestamp Reply         * (not 100% sure, but by analogy with echo replies, limiting these could help mitigate attacks)
##   F Info Request
##   G Info Reply              * (not 100% sure, but by analogy with echo replies, limiting these could help mitigate attacks)
##   H Address Mask Request
##   I Address Mask Reply      * (not 100% sure, but by analogy with echo replies, limiting these could help mitigate attacks)
## Only masking some ICMP requests provides security with minimal slowdown.
net.ipv4.icmp_ratemask=350233

## Prevent simple DoS attacks
## Default is 500 milliseconds.
# net.ipv4.tcp_invalid_ratelimit=500

## Keepalive-settings
## How often to send keepalive requests (default:  7200)
net.ipv4.tcp_keepalive_time=1200
## How many keepalive requests to send (default:  9)
net.ipv4.tcp_keepalive_probes=4
## Time between keepalive requests (default:  75)
net.ipv4.tcp_keepalive_intvl=30

## Prevent simple DoS attacks
net.ipv4.tcp_max_tw_buckets=16384

## Restricts Path-MTU Discovery
net.ipv4.ip_no_pmtu_disc=0
## Don't trust things which can easily be forged
net.ipv4.ip_forward_use_pmtu=0

## Prevent simple DoS attacks
## This number times 64kb equals the maximum amount of
## unswappable memory which can be occupied by orphans.
## Default is 8192, or 512mb.
## Should be as high as possible, where it remains unlikely
## that a sudden reaching of this limit would freeze the system.
# net.ipv4.tcp_max_orphans=8192
## How long until an orphan times out (default:  60):
net.ipv4.tcp_fin_timeout=30

## Prevents assassination hazards
net.ipv4.tcp_rfc1337=1

## Protection from the SYN flood attack
## Violates TCP standard, though...
net.ipv4.tcp_syncookies=1

## Sane retry values
net.ipv4.tcp_syn_retries=2
net.ipv4.tcp_synack_retries=2
