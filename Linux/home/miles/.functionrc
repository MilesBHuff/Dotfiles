#!/usr/bin/env bash
## Copyright (C) by Miles Bradley Huff from 2016-2024 per the LGPL3 (the Third Lesser GNU Public License)
##
## This file contains functions as used by different shells.
## The code in this script must be capable of being run in at least both bash and `zsh`.
##
## All functions start with '_'.  If you want to use them on the commandline, create an alias for them in `.aliasrc`.

### Base
## Suppress stderr
function _noerr {
	"$@" 2>/dev/null
}
## Create a common definition for `ls`
function _ls {
	ls -bCFhNvX --color --group-directories-first --time-style=long-iso "$@"
}
## Print the contents of the directories you visit
function _cdls {
	cd -L "$1"
	_ls
}
## Access a program's helptext.
function _help {
	"$1" --help
}
## A more intelligent sudo.
function _intellisu {
	[[ "$(type 'sudo')" == *'alias'* ]] && unalias 'sudo'
	if [[ $# -gt 0 ]]; then
		if [[ -f "$(command -v sudo)" ]]; then
			sudo -EH $*
		else
			su -c "$*"
		fi
	else
		su
	fi
	alias 'sudo'='_intellisu'
}
## Change keyboard variant
function _kv {
	loadkeys "$1"
	setxkbmap -variant "$1"
}
## Replace all instances of $1 with $2 in the string $3.
function _replace {
	sed -i "s/$1/$2/g" "$3"
}
## Sort, uniq, trim
function _sut {
	if [ ! "$1" ]; then
		echo 'ERROR:  Please provide a file!' >&2
		return 1
	fi
	if [ ! -f "$1" ]; then
		echo 'ERROR:  File does not exist!' >&2
		return 2
	fi
	TEMP="/tmp/.$RANDOM$RANDOM.tmp"
	sort -bs --parallel=$(nproc) < "$1" | uniq | sed -e 's/^[ \t]*//' > "$TEMP"
	mv -f "$TEMP" "$1"
}

### Package-management, etc.
## Non-function code (needed to ascertain the package manager
if [[ ! "$(uname)" = MINGW* ]]; then ## If it looks like we're on Windows, avoid the package manager detection code -- Windows doesn't seem to like `which` very much.
  if [[ ! -z "$(_noerr which 'pacman')" ]]; then  ## pacman comes first because it's what I use.
    PKGMGR='pacman'
elif [[ ! -z "$(_noerr which 'apt')"    ]]; then  ## apt comes next because Debian-derivatives are EVERYWHERE
    PKGMGR='apt'
elif [[ ! -z "$(_noerr which 'yum')"    ]]; then  ## yum next because RHEL is widespread
    PKGMGR='yum'
elif [[ ! -z "$(_noerr which 'zypper')" ]]; then  ## then zypper, because OpenSuSE is less widespread than RHEL-ish distros, but still mainstream...ish.
    PKGMGR='zypper'
  fi
fi
## Tidy up system
function _pkgcc {
	echo "\e[37;1m::\e[0;1m Cleaning package manager...\e[0m"
	case "$PKGMGR" in
		'pacman' )
			#[ -f /var/cache/pacman/pkg/*.aria2 ] && _intellisu rm -fv /var/cache/pacman/pkg/*.aria2
			_intellisu pacman -Sc
			[[ ! -z "$(_noerr which 'pacman-optimize')" ]] && _intellisu pacman-optimize
		;;
		'apt' )
#			_intellisu apt-get autoclean $*
			apt autoclean $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
	echo "\e[37;1m::\e[0;1m Done.\e[0m"
}
## Install package(s)
function _pkgin {
	## If there's no pkgug lockfile or its modification date is more than a day ago, upgrade system first.
	if [[ ! -f '/var/lib/pkgug.lock' ]] || [[ 86400 -lt $(expr $(date +'%s') - $(stat -c %Y '/var/lib/pkgug.lock')) ]]; then
		echo "\e[37;1m::\e[0;1m A system upgrade is required before installing.\e[0m"
		_pkgug
	fi
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(_noerr which 'yay')" ]]; then
				yay -S $*
			else
				_intellisu pacman -S $*
			fi
		;;
		'apt' )
#			_intellisu apt-get install $*
			apt install $*
		;;
		'yum' )
			_intellisu yum install $*
		;;
		'zypper' )
			_intellisu zypper -i $*
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Install package(s) as dependency/ies
function _pkgindep {
	## If there's no pkgug lockfile or its modification date is more than a day ago, upgrade system first.
	if [[ ! -f '/var/lib/pkgug.lock' ]] || [[ 86400 -lt $(expr $(date +'%s') - $(stat -c %Y '/var/lib/pkgug.lock')) ]]; then
		echo "\e[37;1m::\e[0;1m A system upgrade is required before installing.\e[0m"
		_pkgug
	fi
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(_noerr which 'yay')" ]]; then
				yay -S --asdeps $*
			else
				_intellisu pacman -S --asdeps $*
			fi
		;;
		'apt' )
			#TODO
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Purge package(s)
function _pkgpu {
	case "$PKGMGR" in
		'pacman' )
			#TODO
		;;
		'apt' )
#			_intellisu apt-get purge $*
			apt purge $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Reinstall package(s)
function _pkgri {
	## If there's no pkgug lockfile or its modification date is more than a day ago, upgrade system first.
	if [[ ! -f '/run/pkgug.lock' ]] || [[ 86400 -lt $(expr $(date +'%s') - $(stat -c %Y '/run/pkgug.lock')) ]]; then
		echo "\e[37;1m::\e[0;1m A system upgrade is required before installing.\e[0m"
		_pkgug
	fi
	case "$PKGMGR" in
		'pacman' )
			_intellisu pacman -S $*
		;;
		'apt' )
#			_intellisu aptitude reinstall $*
			apt reinstall $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Remove package(s)
function _pkgrm {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(_noerr which 'yay')" ]]; then
				yay -R $*
			else
				_intellisu pacman -R $*
			fi
		;;
		'apt' )
#			_intellisu apt-get remove $*
			apt remove $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Remove unused package(s)
function _pkgru {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(_noerr which 'yay')" ]]; then
				OUTPUT=$(yay -Qdt $*)
			else
				OUTPUT=$(_intellisu pacman -Qdt $*)
			fi
			echo "$OUTPUT" && echo
			_pkgrm $(echo "$OUTPUT" | sed 's/( .*)?\n/ /g')
		;;
		'apt' )
#			_intellisu apt-get autoremove $*
			apt autoremove $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Search packages
function _pkgse {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(_noerr which 'yay')" ]]; then
				yay -Ss $*
			else
				pacman -Ss $*
			fi
		;;
		'apt' )
#			apt-cache search $*
			apt search $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
		;;
	esac
}
## Upgrade system
function _pkgug {
	echo -n '   Upgrade system packages?  [Y/n] '
	read -r INPUT
	if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
		## If there's no pkgup lockfile or its modification date is more than a day ago, update repos first.
		if [[ ! -f '/var/lib/pkgup.lock' ]] || [[ 86400 -lt $(expr $(date +'%s') - $(stat -c %Y '/var/lib/pkgup.lock')) ]]; then
			echo "\e[37;1m::\e[0;1m A repo update is required before upgrading.\e[0m"
			_pkgup
		fi
#		echo "\e[37;1m::\e[0;1m Upgrading system...\e[0m"
#		LC_OLD="$LC_ALL"
#		export LC_ALL='C'
		case "$PKGMGR" in
			'pacman' )
				if [[ ! -z "$(_noerr which 'yay')" ]]; then
					yay -Suu $*
				else
					_intellisu pacman -Suu $*
				fi
			;;
			'apt' )
#				_intellisu apt-get dist-upgrade $*
				apt dist-upgrade $*
				_intellisu dpkg --configure -a
			;;
			'yum' )
				#TODO
			;;
			'zypper' )
				#TODO
			;;
			* )
				(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			;;
		esac
		_intellisu touch '/var/lib/pkgug.lock'
#		export LC_ALL="$LC_OLD"
		echo "\e[37;1m::\e[0;1m Done.\e[0m"
	fi

	## Upgrade shell plugins
	if [[ ! -z "$(_noerr which 'antigen-update')" ]]; then
		echo -n '   Upgrade shell plugins?  [Y/n] '
		read -r INPUT
		if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
			echo "\e[37;1m::\e[0;1m Upgrading Antigen plugins...\e[0m"
			if [[ ! -d "$HOME/.antigen/repos" ]]; then
				[[ ! -d "$HOME/.antigen" ]] && mkdir "$HOME/.antigen"
				mkdir "$HOME/.antigen/repos"
			elif [[ $(ls -A "$HOME/.antigen/repos") ]]; then
				for D in "$HOME/.antigen/repos/"*; do
					if [[ ! -d "$D/.git" ]]; then
						rm -rf "$D"
					fi
				done
			fi
			#antigen-update
			echo "\e[37;1m::\e[0;1m Done.\e[0m"
		fi
	fi

    ## Upgrade programming plugins
	if ([[ ! -z "$(_noerr which 'pip2')" ]]) \
	|| ([[ ! -z "$(_noerr which 'pip3')" ]]) \
	|| ([[ ! -z "$(_noerr which 'npm')" ]]); then
		echo -n '   Upgrade programming plugins?  [Y/n] '
		read -r INPUT
		if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
			if [[ ! -z "$(_noerr which 'pip2')" ]]; then
				echo "\e[37;1m::\e[0;1m Upgrading Python2 plugins...\e[0m"
				_intellisu pip2 install --upgrade pip
			fi
			if [[ ! -z "$(_noerr which 'pip3')" ]]; then
				echo "\e[37;1m::\e[0;1m Upgrading Python3 plugins...\e[0m"
				_intellisu pip3 install --upgrade pip
			fi
			if [[ ! -z "$(_noerr which 'npm')" ]]; then
				echo "\e[37;1m::\e[0;1m Upgrading npm plugins...\e[0m"
				_intellisu npm i -g npm
				_intellisu npm up -g
#				_intellisu npm audit fix -g
#				_intellisu npm ddp -g
				_intellisu chmod -R og+w /usr/lib/node_modules
				_intellisu chmod -R  a+r /usr/lib/node_modules
			fi
			echo "\e[37;1m::\e[0;1m Done.\e[0m"
		fi
	fi

    ## Generate init images
	if [[ ! -z "$(_noerr which 'mkinitcpio')" ]]; then
		echo -n '   Generate new init images?  [Y/n] '
		read -r INPUT
		if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
			echo "\e[37;1m::\e[0;1m Generating init images...\e[0m"
			_intellisu mkinitcpio -P
			echo "\e[37;1m::\e[0;1m Done.\e[0m"
		fi
	fi

	## Update virus-definition database
	if [[ ! -z "$(_noerr which 'freshclam')" ]]; then
	    echo -n '   Update virus-definition database?  [Y/n] '
	    read -r INPUT
	    if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
	        echo "\e[37;1m::\e[0;1m Updating virus-definition database...\e[0m"
	        _intellisu freshclam
			_intellisu clamav-unofficial-sigs.sh
	        echo "\e[37;1m::\e[0;1m Done.\e[0m"
	    fi
	fi
}
## Update repo DBs
function _pkgup {
	echo -n '   Update package repository databases?  [Y/n] '
	read -r INPUT
	if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
		case "$PKGMGR" in
			'pacman' )
				## Refresh mirrors
				if [[ ! -z "$(_noerr which 'reflector')" ]]; then
					echo "\e[37;1m::\e[0;1m Refreshing mirrors...\e[0m"
					TMP_MIRRORLIST="/tmp/$RANDOM$RANDOM"
					[[ -f $TMP_MIRRORLIST ]] && rm -f $TMP_MIRRORLIST
					if [[ ! -z "$COUNTRY" ]]; then
						reflector -c "$COUNTRY" --threads $(nproc) --sort score > $TMP_MIRRORLIST
					else
						reflector --threads $(nproc) --sort score > $TMP_MIRRORLIST
					fi
					_intellisu mv -f $TMP_MIRRORLIST /etc/pacman.d/mirrorlist
					## Remove unneeded pacnews and such
					[[ -f /etc/pacman.d/mirrorlist.pacnew  ]] && _intellisu rm -f /etc/pacman.d/mirrorlist.pacnew
					[[ -f /etc/pacman.d/mirrorlist.pacsave ]] && _intellisu rm -f /etc/pacman.d/mirrorlist.pacsave
					echo "\e[37;1m::\e[0;1m Done.\e[0m"
				fi
				## Update repos
				#echo "\e[37;1m::\e[0;1m Updating repository database...\e[0m"
				if [[ ! -z "$(_noerr which 'pacmatic')" ]]; then
					EXE="_intellisu pacmatic -Sy $*"
				else
					EXE="_intellisu pacman -Sy $*"
				fi
				$EXE
				unset EXE
			;;
			'apt' )
				echo "\e[37;1m::\e[0;1m Updating repository database...\e[0m"
#				_intellisu apt-get update $*
				apt update $*
			;;
			'yum' )
				#TODO
			;;
			'zypper' )
				#TODO
			;;
			* )
				(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			;;
		esac
		_intellisu touch '/var/lib/pkgup.lock'
		echo "\e[37;1m::\e[0;1m Done.\e[0m"
	fi

    ## Update PGP database
	if [[ ! -z "$(_noerr which 'gpg2')" ]]; then
		echo -n '   Update PGP database?  [Y/n] '
		read -r INPUT
		if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
			echo "\e[37;1m::\e[0;1m Updating PGP database...\e[0m"
			if [[ ! -z "$(_noerr which 'gpg2')" ]]; then
				gpg2 --refresh
			else
				gpg --refresh
			fi
			echo "\e[37;1m::\e[0;1m Done.\e[0m"
		fi
	fi

    ## Update Pipelight plugins database
	if [[ ! -z "$(_noerr which 'pipelight-plugin')" ]]; then
		echo -n '   Update Pipelight plugins database?  [Y/n] '
		read -r INPUT
		if [[ ! "$INPUT" =~ '[Nn]' ]] && [[ ! "$INPUT" =~ '[Nn][Oo]' ]]; then
			echo "\e[37;1m::\e[0;1m Updating Pipelight plugins database...\e[0m"
			_intellisu pipelight-plugin --update --accept --create-mozilla-plugins
			echo "\e[37;1m::\e[0;1m Done.\e[0m"
		fi
	fi
}

### Security scans
## Alias for rkhunter
function _rkhunter {
	PKGFMT='NONE'
	case "$PKGMGR" in
		'apt' )
			PKGFMT='DPKG'
		;;
		'yum' )
			PKGFMT='RPM'
		;;
		'zypper' )
			PKGFMT='RPM'
		;;
	esac
	_intellisu rkhunter -c -l '/var/log/rkhunter.log' --pkgmgr "$PKGFMT" --sk
	unset PKGFMT
}
## Alias for clamscan
function _clamscan {
	#_intellisu clamscan -aoirzl '/var/log/clamav/clamscan.log' --bell $* #--enable-stats
	_intellisu clamdscan --multiscan --fdpass $* | _intellisu tee '/var/log/clamav/manualscan.log'
}
## Scan for security threats
function _scansys {
	echo "\e[37;1m::\e[0;1m Checking for rootkits...\e[0m"
	_rkhunter
	echo "\e[37;1m::\e[0;1m Done.\e[0m"

	echo "\e[37;1m::\e[0;1m Checking for viruses...\e[0m"
	_clamscan '/'
	echo "\e[37;1m::\e[0;1m Done.\e[0m]\n"
}

### Miscellanious
## Git
function _glog {
	## Variables
	[[ -z "$1" ]] && 1=12
	START_DIR="$(pwd)"
	THEADER='\e[1mGraph	Branch         Commit     Date        PGP  Email                     Summary\e[0m'
	TFORMAT='	%C(auto)%<(13,mtrunc)%D%C(reset)  %C(yellow)%>(9,trunc)%H%C(reset)  %C(green)%>(10,trunc)%cd%C(reset)  %C(red)(%G?)%C(reset)  %C(blue)%<(24,trunc)%aE%C(reset)  %s'
	## Email address length:  https://www.freshaddress.com/blog/long-email-addresses

	## If the user specified a directory, cd to it.
	[[ -d "$2" ]] && cd "$2"

	## Print the table
	if [[ -d '.git' ]]; then
		echo -e "$THEADER" &&        \
		git log                      \
		  --abbrev-commit            \
			--cherry-mark            \
			--date-order             \
			--graph                  \
			--ignore-space-at-eol    \
			--left-right             \
			--use-mailmap            \
			--color=auto             \
			--date=format:'%Y-%m-%d' \
			--decorate=auto          \
			--max-count="$1"         \
		  --pretty=tformat:"$TFORMAT"
	else
		echo 'fatal: not a git repository (or any of the parent directories): .git' >&2
	fi

	## Return to the starting directory
	cd "$START_DIR"
}
