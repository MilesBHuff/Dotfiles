#!/usr/bin/env bash
## This file contains aliases and functions as used by different shells.  The
## code in this script must be capable of being run in at least both bash and
## zsh.
## Copyright Â© by Miles Bradley Huff from 2016-2017 per the LGPL3 (the Third Lesser GNU Public License)


#### FUNCTIONS -----------------------------------------------------------------
## All functions start with '_'.
## Even though this '_' could be removed (thus eliminating the need for several
## alias lines), the extra alias lines help to codify the functions in-use.

### Base
function _cdls {
	cd -L "$1"
	ls -bCFNvX --color --group-directories-first
}
## Access a program's helptext.
function _help {
	"$1" --help
}
## A more intelligent sudo.
function _intellisu {
	[[ "$(type 'sudo')" == *'alias'* ]] && unalias 'sudo'
	if [[ $# -gt 0 ]]; then
		if [[ -f "$(command -v sudo)" ]]; then
			sudo -EH $*
		else
			su -c "$*"
		fi
	else
		su
	fi
	alias 'sudo'='_intellisu'
}
## Replace all instances of $1 with $2 in the string $3.
function _replace {
	sed -i "s/$1/$2/g" "$3"
}

### File-editing
function _editenv {
	ENV_FILE="$HOME/.pam_environment"
	nano "$ENV_FILE"
	sort -bh < "$ENV_FILE" | uniq -u > '/tmp/.env'
	mv -f '/tmp/.env' "$ENV_FILE"
}
function _editenvsys {
	ENV_FILE='/etc/environment'
	_intellisu nano "$ENV_FILE"
	sort -bh --parallel="$(nproc)" < "$ENV_FILE"| uniq -u > '/tmp/.env'
	_intellisu mv -f '/tmp/.env' "$ENV_FILE"
}
function _editlcsys {
	ENV_FILE='/etc/locale.conf'
	_intellisu nano "$ENV_FILE"
	sort -bh --parallel="$(nproc)" < "$ENV_FILE" | uniq -u > '/tmp/.env'
	_intellisu mv -f /tmp/.env "$ENV_FILE"
}

### Package-management, etc.
## Non-function code (needed to ascertain the package manager
  if [[ ! -z "$(which 'pacman')" ]] && [[ "$(which 'pacman')" != *'not found'* ]]; then  ## pacman comes first because it's what I use.
	PKGMGR='pacman'
elif [[ ! -z "$(which 'apt')" ]] && [[ "$(which 'apt')"    != *'not found'* ]]; then  ## aptitude etc come next because Debian-derivatives are EVERYWHERE
	PKGMGR='apt'
elif [[ ! -z "$(which 'yum')" ]] && [[ "$(which 'yum')"    != *'not found'* ]]; then  ## yum next because RHEL is widespread
	PKGMGR='yum'
elif [[ ! -z "$(which 'zypper')" ]] && [[ "$(which 'zypper')" != *'not found'* ]]; then  ## then zypper, because OpenSuSE is less widespread than RHEL-ish distros, but still mainstream...ish.
	PKGMGR='zypper'
  fi
## Tidy up system
function _pkgcc {
	echo "\e[34;1m::\e[0;1m Cleaning package manager...\e[0m"
	case "$PKGMGR" in
		'pacman' )
			#[ -f /var/cache/pacman/pkg/*.aria2 ] && _intellisu rm -fv /var/cache/pacman/pkg/*.aria2
			_intellisu pacman -Sc
			[[ ! -z "$(which 'pacman-optimize')" ]] && [[ "$(which 'pacman-optimize')" != *'not found'* ]] && _intellisu pacman-optimize
		;;
		'apt' )
			_intellisu apt-get autoclean $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
	echo "\e[34;1m::\e[0;1m Done.\e[0m"
}
## Install package(s)
function _pkgin {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(which 'yaourt')" ]] && [[ "$(which 'yaourt')" != *'not found'* ]]; then
				_intellisu yaourt -a $*
			else
				_intellisu pacman -S $*
			fi
		;;
		'apt' )
			_intellisu apt-get install $*
		;;
		'yum' )
			_intellisu yum install $*
		;;
		'zypper' )
			_intellisu zypper -i $*
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Install package(s) as dependency/ies
function _pkgindep {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(which 'yaourt')" ]] && [[ "$(which 'yaourt')" != *'not found'* ]]; then
				_intellisu yaourt --asdeps $*
			else
				_intellisu pacman --asdeps #TODO
			fi
		;;
		'apt' )
			#TODO
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Purge package(s)
function _pkgpu {
	case "$PKGMGR" in
		'pacman' )
			#TODO
		;;
		'apt' )
			#TODO
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Reinstall package(s)
function _pkgri {
	case "$PKGMGR" in
		'pacman' )
			#TODO
		;;
		'apt' )
			#TODO
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Remove package(s)
function _pkgrm {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(which 'yaourt')" ]] && [[ "$(which 'yaourt')" != *'not found'* ]]; then
				_intellisu yaourt -R $*
			else
				_intellisu pacman -R $*
			fi
		;;
		'apt' )
			_intellisu apt-get remove $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Remove unused package(s)
function _pkgru {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(which 'yaourt')" ]] && [[ "$(which 'yaourt')" != *'not found'* ]]; then
				_intellisu yaourt -Qdt $*
			else
				_intellisu pacman -Qdt $*
			fi
		;;
		'apt' )
			_intellisu apt-get autoremove $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Search packages
function _pkgse {
	case "$PKGMGR" in
		'pacman' )
			if [[ ! -z "$(which 'yaourt')" ]] && [[ "$(which 'yaourt')" != *'not found'* ]]; then
				_intellisu yaourt -a $*
			else
				echo -n '' #TODO
			fi
		;;
		'apt' )
			apt-cache search $*
		;;
		'yum' )
			#TODO
		;;
		'zypper' )
			#TODO
		;;
		* )
			(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
			exit 1
		;;
	esac
}
## Upgrade system
function _pkgug {
	echo -n 'Upgrade system packages?  [Y/n] '
	read -r INPUT
	if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
		echo "\e[34;1m::\e[0;1m Upgrading system...\e[0m"
		case "$PKGMGR" in
			'pacman' )
				if [[ ! -z "$(which 'yaourt')" ]] && [[ "$(which 'yaourt')" != *'not found'* ]]; then
					_intellisu yaourt -Suua $*
				else
					_intellisu pacman -Suu $*
				fi
			;;
			'apt' )
				_intellisu apt-get upgrade $*
			;;
			'yum' )
				#TODO
			;;
			'zypper' )
				#TODO
			;;
			* )
				(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
				exit 1
			;;
		esac
   		echo "\e[34;1m::\e[0;1m Done.\e[0m"
	fi

	## Update virus-definition database
	if [[ ! -z "$(which 'freshclam')" ]] && [[ "$(which 'freshclam')" != *'not found'* ]]; then
	    echo -n 'Update virus-definition database?  [Y/n] '
	    read -r INPUT
	    if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
	        echo "\e[34;1m::\e[0;1m Updating virus-definition database...\e[0m"
	        _intellisu freshclam
	        echo "\e[34;1m::\e[0;1m Done.\e[0m"
	        echo
	    fi
	fi

    ## Upgrade Antigen plugins
	if [[ ! -z "$(which 'antigen-update')" ]] && [[ "$(which 'antigen-update')" != *'not found'* ]]; then
		echo -n 'Upgrade Antigen plugins?  [Y/n] '
		read -r INPUT
		if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
			echo "\e[34;1m::\e[0;1m Upgrading Antigen plugins...\e[0m"
			if [[ ! -d "$HOME/.antigen/repos" ]]; then
				[[ ! -d "$HOME/.antigen" ]] && mkdir "$HOME/.antigen"
				mkdir "$HOME/.antigen/repos"
			elif [[ $(ls -A "$HOME/.antigen/repos") ]]; then
				for D in "$HOME/.antigen/repos/"*; do
					if [[ ! -d "$D/.git" ]]; then
						rm -rf "$D"
					fi
				done
			fi
			#antigen-update
			echo "\e[34;1m::\e[0;1m Done.\e[0m"
			echo
		fi
	fi

    ## Upgrade Python plugins
	if [[ ! -z "$(which 'pip2')" ]] && [[ "$(which 'pip2')" != *'not found'* ]] || [[ ! -z "$(which 'pip3')" ]] && [[ "$(which 'pip3')" != *'not found'* ]]; then
		echo -n 'Upgrade Python plugins?  [Y/n] '
		read -r INPUT
		if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
			echo "\e[34;1m::\e[0;1m Upgrading Python plugins...\e[0m"
			[[ ! -z "$(which 'pip2')" ]] && [[ "$(which 'pip2')" != *'not found'* ]] && _intellisu pip2 install --upgrade pip
			[[ ! -z "$(which 'pip3')" ]] && [[ "$(which 'pip3')" != *'not found'* ]] && _intellisu pip3 install --upgrade pip
			echo "\e[34;1m::\e[0;1m Done.\e[0m"
			echo
		fi
	fi

    ## Generate init images
	if [[ ! -z "$(which 'mkinitcpio')" ]] && [[ "$(which 'mkinitcpio')" != *'not found'* ]]; then
		echo -n 'Generate new init images?  [Y/n] '
		read -r INPUT
		if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
			echo "\e[34;1m::\e[0;1m Generating init images...\e[0m"
			_intellisu mkinitcpio -p fallback
			echo "\e[34;1m::\e[0;1m Done.\e[0m"
			echo
		fi
	fi
}
## Update repo DBs
function _pkgup {
	echo -n 'Update package repository databases?  [Y/n] '
	read -r INPUT
	if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
		case "$PKGMGR" in
			'pacman' )
				## Refresh mirrors
				if [[ ! -z "$(which 'reflector')" ]] && [[ "$(which 'reflector')" != *'not found'* ]]; then
					echo "\e[34;1m::\e[0;1m Refreshing mirrors...\e[0m"
					TMP_MIRRORLIST='/tmp/mirrorlist' #TODO: Randomize the filename in order to protect against attacks.
					[[ -f $TMP_MIRRORLIST ]] && rm -f $TMP_MIRRORLIST
					reflector -c US --threads $(nproc) --sort score > $TMP_MIRRORLIST #NOTE: Make sure you set it to use your country!
					_intellisu mv -f $TMP_MIRRORLIST /etc/pacman.d/mirrorlist
					## Remove unneeded pacnews and such
					[[ -f /etc/pacman.d/mirrorlist.pacnew  ]] && _intellisu rm -f /etc/pacman.d/mirrorlist.pacnew
					[[ -f /etc/pacman.d/mirrorlist.pacsave ]] && _intellisu rm -f /etc/pacman.d/mirrorlist.pacsave
					echo "\e[34;1m::\e[0;1m Done.\e[0m"
				fi
				## Update repos
				echo "\e[34;1m::\e[0;1m Updating repository-database...\e[0m"
				if [[ ! -z "$(which 'pacmatic')" ]] && [[ "$(which 'pacmatic')" != *'not found'* ]]; then
					EXE="_intellisu pacmatic -Sy $*"
				else
					EXE="_intellisu pacman -Sy $*"
				fi
				$EXE
				unset EXE
				echo "\e[34;1m::\e[0;1m Done.\e[0m"
			;;
			'apt' )
				_intellisu apt-get update $*
			;;
			'yum' )
				#TODO
			;;
			'zypper' )
				#TODO
			;;
			* )
				(>&2 echo "\e[31;1m[ERROR]\e[0;1m Unknown package manager!\e[0m")
				exit 1
			;;
		esac
	fi

    ## Update PGP database
	if [[ ! -z "$(which 'gpg2')" ]] && [[ "$(which 'gpg2')" != *'not found'* ]] || [[ ! -z "$(which 'gpg')" ]] && [[ "$(which 'gpg')" != *'not found'* ]]; then
		echo -n 'Update PGP database?  [Y/n] '
		read -r INPUT
		if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
			echo "\e[34;1m::\e[0;1m Updating PGP database...\e[0m"
			if [[ ! -z "$(which 'gpg2')" ]] && [[ "$(which 'gpg2')" != *'not found'* ]]; then
				gpg2 --refresh
			else
				gpg --refresh
			fi
			echo "\e[34;1m::\e[0;1m Done.\e[0m"
			echo
		fi
	fi

    ## Update Pipelight plugins database
	if [[ ! -z "$(which 'pipelight-plugin')" ]] && [[ "$(which 'pipelight-plugin')" != *'not found'* ]]; then
		echo -n 'Update Pipelight plugins database?  [Y/n] '
		read -r INPUT
		if [ "$INPUT" != 'n' ] && [ "$INPUT" != 'N' ] && [ "$INPUT" != 'no' ] && [ "$INPUT" != 'No' ] && [ "$INPUT" != 'NO' ] && [ "$INPUT" != 'nO' ]; then
			echo "\e[34;1m::\e[0;1m Updating Pipelight plugins database...\e[0m"
			_intellisu pipelight-plugin --update --accept --create-mozilla-plugins
			echo "\e[34;1m::\e[0;1m Done.\e[0m"
			echo
		fi
	fi
}

### Security scans
## Alias for rkhunter
function _rkhunter {
	PKGFMT='NONE'
	case "$PKGMGR" in
		'apt' )
			PKGFMT='DPKG'
		;;
		'yum' )
			PKGFMT='RPM'
		;;
		'zypper' )
			PKGFMT='RPM'
		;;
	esac
	_intellisu rkhunter -c -l '/var/log/rkhunter.log' --pkgmgr "$PKGFMT" --sk
	unset PKGFMT
}
## Alias for clamscan
function _clamscan {
	_intellisu clamscan -aoirzl '/var/log/clamav/clamscan.log' --bell --enable-stats $*
}
## Scan for security threats
function _scansys {
	echo "\e[34;1m::\e[0;1m Checking for rootkits...\e[0m"
	_rkhunter
	echo "\e[34;1m::\e[0;1m Done.\e[0m"

	echo "\e[34;1m::\e[0;1m Checking for viruses...\e[0m"
	_clamscan '/'
	echo "\e[34;1m::\e[0;1m Done.\e[0m"
}


#### ALIASES --------------------------------------------------------------------
### High-importance
alias     'sudo'='_intellisu'

### Filesystem navigation
#NOTE:  ORDER MATTERS!
## grep
alias          'grep'='grep -EIisTu --color=always'
alias             'g'='grep'
alias   'search-full'='grep -Rl'
alias 'search-full-v'='grep -Rns'
alias      'histgrep'='cat "$HOME/.sh_history" | grep'
alias          'hist'='histgrep'
## ls
alias     'ls'='ls -bCFhNvX --color --group-directories-first --time-style=long-iso'
alias    'lsg'='ls  -x | grep'
alias    'lsa'='ls  -A'
alias   'lsag'='lsa -x | grep'
alias    'lsl'='ls  -l'
alias   'lslg'='lsl -x | grep'
alias   'lsal'='lsa -l'
alias  'lsalg'='lsal   | grep'
alias    'lss'='ls  -s'
alias   'lssg'='lss    | grep'
alias   'lsas'='lsa -s'
alias  'lsasg'='lsas   | grep'
alias    'lst'='lsattr'
alias   'lstg'='lst    | grep'
alias   'lsat'='lst -a'
alias  'lsatg'='lsat   | grep'
alias 'search'='ls **  | grep'
## clear
alias    'cl'='clear'
alias   'cls'='cl && ls'
alias  'clsa'='cl && lsa'
alias  'clsl'='cl && lsl'
alias 'clsal'='cl && lsal'
alias  'clss'='cl && lss'
alias 'clsas'='cl && lsas'
alias  'clst'='cl && lst'
alias 'clsat'='cl && lsat'
## cd
alias       'cd'='_cdls'
alias      'cd.'='cd .'
alias     'cd..'='cd ..'
alias    'cd...'='cd ...'
alias   'cd....'='cd ....'
alias  'cd.....'='cd .....'
alias 'cd......'='cd ......'

### File-modification
## rsync
alias   'rscp'='rsync -vrdlpEAXogtOJSzh4 --specials --preallocate --delay-updates --suffix=.bak --no-motd --info=BACKUP0,COPY1,DEL1,FLIST0,MISC0,MOUNT0,NAME0,PROGRESS0,REMOVE1,SKIP0,STATS0,SYMSAFE0' ## Clobbering cp
alias 'rscpup'='rscp -u' ## Only replace outdated files
alias   'rsmv'='rscp --remove-source-files' ## Clobbering mv
### cp
alias   'cp'='cp -aLv --sparse=always'  ## Preserve all attributes, dereference links, and try to make files sparse whenever possible.
alias  'cpi'='cp -i'  ## Interactive cp
alias  'cpf'='cp -f'  ## Clobbering cp
alias  'cpl'='cp -d'  ## Preserve symlinks
alias 'cpup'='cp -u'  ## Only replace outdated files
## ln
alias 'lnh'='ln -iv' ## Hard links
alias 'lns'='lnh -s' ## Symbolic links
alias 'lnr'='lns -r' ## Relative links
alias  'ln'='lns'    ## Default
## mv
alias   'mv'='mv -v'  ## mv defaults
alias  'mvi'='mv -i'  ## Interactive move
alias  'mvf'='mv -f'  ## Clobbering move
alias 'mvup'='mv -u'  ## Only replace outdated files
## rm
alias  'rm'='rm -dIrv'  ## Interactive rm
# alias  'rm'='rm_trash'  ## Recycling rm
alias 'rmi'='rm -dirv'  ## OCD interactive rm
alias 'rmf'='rm -dfrv'  ## Merciless rm
## *dir
alias 'mkdir'='mkdir -pv'
alias    'md'='mkdir'
alias 'rmdir'='rmdir -v'
alias    'rd'='rmdir'

### chattr
## chattr is a hidden gem that really ought to have support in GUI file-managers.  Even Windows Explorer can do more chattr than Linux file managers!
## Generally speaking, I used the names of related mount options for these aliases.
alias      'chattr'='chattr -V'  ## Verbose.
alias      'append'='chattr +a'  ## Only appends;  no clobbering.
alias       'atime'='chattr -A'  ## Enable timestamps.
alias       'async'='chattr -D'  ## Perform I/O asynchronously.
alias       'block'='chattr +T'  ## Place independently on the disk.
alias     'clobber'='chattr -a'  ## Allow overwrites.
alias    'compress'='chattr +c'  ## Enable compression.
alias     'datacow'='chattr -C'  ## Enable Copy-On-Write.
alias     'deblock'='chattr -T'  ## Place alongside everything else on the disk.
alias  'decompress'='chattr -c'  ## Disable compression.
alias    'dirasync'='chattr -S'  ## Perform I/O asynchronously.
alias     'dirsync'='chattr +S'  ## Perform I/O syncronously.
alias        'dump'='chattr -d'  ## Allow backups.
alias     'journal'='chattr +j'  ## Write journal before file.
alias     'noatime'='chattr +A'  ## Disable timestamps.
alias   'nodatacow'='chattr +C'  ## Disable Copy-On-Write.
alias      'nodump'='chattr +d'  ## Disallow backups.
alias       'nopid'='chattr -P'  ## Allow variable project IDs.
alias  'norecovery'='chattr +u'  ## Allows a file to be truly deleted.
alias 'notailmerge'='chattr -t'  ## Disables tail-merging.
alias         'pid'='chattr +P'  ## Force subfiles to share the same project ID.
alias   'tailmerge'='chattr +t'  ## Enables tailmerging.
alias          'ro'='chattr +i'  ## Disallow writes.
alias          'rw'='chattr -i'  ## Allow writes.
alias        'sync'='chattr +D'  ## Perform I/O syncronously.
alias    'recovery'='chattr +u'  ## Makes it such that the file cannot truly be deleted.
alias   'writeback'='chattr -j'  ## Normal behaviour.
alias        'zero'='chattr +s'  ## Zero out this file upon deletion.

### Edit
alias       'nano'='nano -FNOPSUwz$ -T 4'
alias  'editalias'='nano ~/.aliasrc'
alias   'editbash'='nano ~/.bashrc'
alias    'editenv'='_editenv'
alias 'editenvsys'='_editenvsys'
alias  'editlcsys'='_editlcsys'
alias   'editprof'='nano ~/.profile'
alias     'editwm'='nano ~/.config/awesome/rc.lua'
alias    'editzsh'='nano ~/.zshrc'

## Package management
alias    'pkgcc'='_pkgcc'
alias    'pkgin'='_pkgin'
alias 'pkgindep'='_pkgindep'
alias    'pkgpu'='_pkgpu'
alias    'pkgri'='_pkgri'
alias    'pkgrm'='_pkgrm'
alias    'pkgru'='_pkgru'
alias    'pkgse'='_pkgse'
alias    'pkgug'='_pkgug'
alias    'pkgup'='_pkgup'

## User/group management
alias 'chmod'='chmod -Rc'
alias 'chown'='chown -Rc'
alias 'chgrp'='chgrp -Rc'

### Specific applications
## git
alias   'gadd'='git add -A'
alias 'gclone'='git clone'
alias  'gcomm'='git commit -m'
alias  'ginit'='git init'
alias   'glog'="echo 'Graph	Branch         Commit     Date        PGP  Email       Summary' && git log --abbrev-commit --cherry-mark --date-order --graph --ignore-space-at-eol --left-right --use-mailmap --color=auto --date=format:'%Y-%m-%d' --decorate=auto --max-count=12 --pretty=tformat:'	%C(auto)%<(13,mtrunc)%D%C(reset)  %C(auto)%>(9,trunc)%H%C(reset)  %C(green)%>(10,trunc)%cd%C(reset)  %C(red)(%G?)%C(reset)  %C(blue)%<(10,trunc)%aE%C(reset)  %<(50,trunc)%s'"
alias  'gpull'='git pull'
alias  'gpush'='git push'
alias  'gstat'='git status -sb --ignored --column'
## GnuPG
alias        'gpg1'='gpg'
alias         'gpg'='gpg2'
alias 'fingerprint'='gpg --fingerprint'
## udevinfo/udevadm (for cross-distro compatibility)
[[ -f /usr/bin/udevadm  ]] && [[ ! -f /usr/bin/udevinfo ]] && alias 'udevinfo'='udevadm'
[[ -f /usr/bin/udevinfo ]] && [[ ! -f /usr/bin/udevadm  ]] && alias  'udevadm'='udevinfo'

### Other
alias     'archey'='cl && archey3'
alias     'catnum'='cat -ns'
alias   'clamscan'='_clamscan'
alias       'date'='date +"%Y-%m-%d | %H:%M %Z"'
alias    'entropy'='head -c 4 "/proc/sys/kernel/random/entropy_avail" && echo -n " / " && cat "/proc/sys/kernel/random/poolsize"'
alias 'fontconfig'='sudo fc-cache-32 -rsv && sudo fc-cache -rsv && fc-cache-32 -rv ~/.fonts && fc-cache -rv ~/.fonts'
alias       'help'='_help'
alias       'hold'='while true; do sleep 60; done'
alias      'lsblk'='lsblk -a -o NAME,LABEL,FSTYPE,MOUNTPOINT'
alias  'lsblkloop'='local -i i=0; while true; do i=$i+1 && echo "$i" && lsblk && echo && sleep 1; done'
alias    'replace'='_replace'
alias   'rkhunter'='_rkhunter'
alias    'scansys'='_scansys'
alias       'sysd'='sudo systemctl'
alias   'timidity'='timidity -aB 1,12 -E wpvseToz --noise-shaping=4 --output-stereo --output-signed'
