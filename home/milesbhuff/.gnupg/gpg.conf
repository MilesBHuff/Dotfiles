## GPG.conf
## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
## This file is derived from the following sources:
##
## + https://github.com/ioerror/duraconf/blob/master/configs/gnupg/gpg.conf
## + https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/
## + The GNUPG default gpg.conf file (notice below)
##
## Options for GnuPG
## Copyright 1998-2003, 2010 Free Software Foundation, Inc.
## Copyright 1998-2003, 2010 Werner Koch
##
## This file is free software; as a special exception the author gives
## unlimited permission to copy and/or distribute it, with or without
## modifications, as long as this notice is preserved.
##
## This file is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
## implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
##
## Unless you specify which option file to use (with the command line
## option "--options filename"), GnuPG uses the file ~/.gnupg/gpg.conf
## by default.
##
## An options file can contain any long options which are available in
## GnuPG. If the first non white space character of a line is a '#',
## this line is ignored.  Empty lines are also ignored.
##
## See the gpg man page for a list of options.


## Default Keys
## =============================================================================

## The default key to sign with. If this option is not used, the default key
## is the first key found in the secret keyring
# default-key 0xD8692123C4065DEA5E0F3AB5249B39D24F25E3B6

## If you do not pass a recipient to gpg, it will ask for one.  Using
## this option you can encrypt to a default key.  Key validation will
## not be done in this case.  The second form uses the default key as
## default recipient.
# default-recipient some-user-id
# default-recipient-self

## Group names may be defined like this:
# group mynames = paige 0x12345678 joe patti
## Any time "mynames" is a recipient (-r or --recipient), it will be
## expanded to the names "paige", "joe", and "patti", and the key ID
## "0x12345678".  Note there is only one level of expansion - you
## cannot make an group that points to another group.  Note also that
## if there are spaces in the recipient name, this will appear as two
## recipients.  In these cases it is better to use the key ID.
# group mynames = 


## Behaviour
## =============================================================================

## Disable comment string in clear text signatures and ASCII armored messages
no-comments

## Disable inclusion of the version string in ASCII armored output
no-emit-version

## Don't hide options from the user
expert

## When outputting certificates, view user IDs distinctly from keys:
fixed-list-mode

## Display long key IDs
keyid-format 0xlong

## Display the calculated validity of user IDs during key listings
list-options   show-uid-validity
verify-options show-uid-validity

## Try to use the GnuPG-Agent. With this option, GnuPG first tries to connect to
## the agent before it asks for a passphrase.
## If you use a graphical environment (and even if you don't) you should be using an agent:
## (similar arguments as https://www.debian-administration.org/users/dkg/weblog/64)
use-agent

## List all keys (or the specified ones) along with their fingerprints
with-fingerprint

## Because some mailers change lines starting with "From " to ">From ",
## it is good to handle such lines in a special way when creating
## cleartext signatures; all other PGP versions do it this way too.
## To enable full OpenPGP compliance you may want to use this option.
# no-escape-from-lines

## Uncomment the following option to get rid of the copyright notice
# no-greeting

## Uncomment this line to display photo user IDs in key listings and
## when a signature from a key with a photo is verified.
# show-photos

## Use this program to display photo user IDs
##
## + %i is expanded to a temporary file that contains the photo.
## + %I is the same as %i, but the file isn't deleted afterwards by GnuPG.
## + %k is expanded to the key ID of the key.
## + %K is expanded to the long OpenPGP key ID of the key.
## + %t is expanded to the extension of the image (e.g. "jpg").
## + %T is expanded to the MIME type of the image (e.g. "image/jpeg").
## + %f is expanded to the fingerprint of the key.
## + %% is %, of course.
##
## If %i or %I are not present, then the photo is supplied to the
## viewer on standard input.  If your platform supports it, standard
## input is the best way to do this as it avoids the time and effort in
## generating and then cleaning up a secure temp file.
##
## The default program is "xloadimage -fork -quiet -title 'KeyID 0x%k' stdin"
## On Mac OS X and Windows, the default is to use your regular JPEG image
## viewer.
##
## Some other viewers:
## + photo-viewer "qiv %i"
## + photo-viewer "ee %i"
## + photo-viewer "display -title 'KeyID 0x%k'"
##
## This one saves a copy of the photo ID in your home directory:
# photo-viewer "cat > ~/photoid-for-key-%k.%t"
## Use your MIME handler to view photos:
# photo-viewer "metamail -q -d -b -c %T -s 'KeyID 0x%k' -f GnuPG"

## Get the best of the WoT and ToFU:
trust-model tofu+pgp
tofu-default-policy unknown


## Keyserver Settings
## =============================================================================

## GPGv2:  Keyserver and CACert are set in dirmngr.conf
## GPGv1 ONLY:
# keyserver hkps://hkps.pool.sks-keyservers.net
# keyserver-options ca-cert-file=../.cert/hkps.pool.sks-keyservers.net.pem

## Set the proxy to use for HTTP and HKP keyservers - default to the standard
## local Tor socks proxy
## It is encouraged to use Tor for improved anonymity. Preferrably use either a
## dedicated SOCKSPort for GnuPG and/or enable IsolateDestPort and
## IsolateDestAddr
# keyserver-options http-proxy=socks5-hostname://127.0.0.1:9050

## GPGv1 ONLY:
## Don't leak DNS, see https://trac.torproject.org/projects/tor/ticket/2846
# keyserver-options no-try-dns-srv

## GnuPG can automatically locate and retrieve keys as needed using
## this option.  This happens when encrypting to an email address (in
## the "user@@example.com" form) and there are no keys matching
## "user@example.com" in the local keyring.  This option takes any
## number mechanisms which are tried in the given order.  The default
## is "--auto-key-locate local" to search for keys only in the local
## key database.  Uncomment the next line to locate a missing key using
## two DNS based mechanisms.
# auto-key-locate local,pka,dane

## Automatically fetch keys as needed from the keyserver when verifying
## signatures or when importing keys that have been revoked by a revocation
## key that is not present on the keyring.
keyserver-options auto-key-retrieve

## When using --refresh-keys, if the key in question has a preferred keyserver
## URL, then enable use of that preferred keyserver to refresh the key.
# keyserver-options honor-keyserver-url
keyserver-options no-honor-keyserver-url

## Include attribute IDs (aka "photo IDs") when sending keys to the keyserver.
keyserver-options include-attributes
# keyserver-options no-include-attributes

## GPGv1 ONLY:
## When searching, include keys marked as "disabled" on the keyserver
## (not all keyservers support this).
#keyserver-options include-disabled
#keyserver-options no-include-disabled

## When searching, include keys marked as "revoked" on the keyserver.
keyserver-options include-revoked
# keyserver-options no-include-revoked

## Show more information as the keys are fetched. Can be used more than once
## to increase the amount of information shown.
# keyserver-options verbose


## Algorithms & Ciphers
## =============================================================================

## List of personal digest preferences. When multiple digests are supported by
## all recipients, choose the strongest one
personal-cipher-preferences AES256 AES192 AES CAST5

## List of personal digest preferences. When multiple ciphers are supported by
## all recipients, choose the strongest one
personal-digest-preferences SHA512 SHA384 SHA256 SHA224

## Message digest algorithm used when signing a key
## SHA512 is faster than SHA256 on 64-bit processors, as well as much more secure.
## See https://crypto.stackexchange.com/questions/26336/sha512-faster-than-sha256.
cert-digest-algo SHA512

## This preference list is used for new keys and becomes the default for
## "setpref" in the edit menu
default-preference-list SHA512 SHA384 SHA256 SHA224 AES256 AES192 AES CAST5 ZLIB BZIP2 ZIP Uncompressed
