#!/usr/bin/sysctl
## This file contains settings which are related to ipv4 networking, yet not particularly related to security.
## Documentation:  https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt
## Copyright Â© by Miles Bradley Huff from 2016-2017 per the LGPL3 (the Third Lesser GNU Public License)

## Has to come first
# net.ipv4.ip_forward=0

## Forwarding
net.ipv4.conf.all.forwarding=1

## CIPSO settings
net.ipv4.cipso_cache_enable=1
net.ipv4.cipso_rbm_optfmt=1
net.ipv4.cipso_rbm_structvalid=0

## ARP
net.ipv4.conf.all.app_solicit=2
net.ipv4.conf.all.arp_accept=1
net.ipv4.conf.all.arp_announce=1
net.ipv4.conf.all.arp_filter=0
net.ipv4.conf.all.arp_ignore=0
net.ipv4.conf.all.mcast_resolicit=2
net.ipv4.conf.all.proxy_arp=1
net.ipv4.conf.all.proxy_arp_pvlan=1

## Prevents failed nexthops.
net.ipv4.fib_multipath_use_neigh=1

## Lets the below work properly.
net.ipv4.tcp_window_scaling=     1
net.ipv4.tcp_moderate_rcvbuf=     1
## Set default to average expected network speed.  This is decisively 256960 throughout the USA.
## Go to link for more info:  http://www.speedguide.net/analyzer.php
net.core.rmem_default=256960
net.core.wmem_default=256960
## Min is one page, default is as above, max is 6MB for rmem, 4MB for wmem.
net.ipv4.tcp_rmem=  4096 256960 6291456
net.ipv4.tcp_wmem=  4096 256960 4194304

## Can cause problems if enabled
net.ipv4.tcp_abort_on_overflow=0

## Merge smaller packets together
net.ipv4.tcp_autocorking=1
## Demuxes certain TCP packets
net.ipv4.ip_early_demux=1

## Best congestion algorithm
net.ipv4.tcp_congestion_control=cubic
## Allow communication of congestion
net.ipv4.tcp_ecn    =2
net.ipv4.tcp_ecn_fallback=1
## Only particularly useful at high speeds;  can improve congestion-algorithm efficacy.
net.ipv4.tcp_timestamps=0

## If enabled, can cause unreliable profiling that actually slows stuff down.
net.ipv4.tcp_no_metrics_save=1
## If enabled, the TCP stack deliberately slows itself down after an RTO.
net.ipv4.tcp_slow_start_after_idle=0
## Benchmarks of the above two tweaks:
## https://github.com/ton31337/tools/wiki/tcp_slow_start_after_idle---tcp_no_metrics_save-performance

## Allows opening packets before completing the 3-way handshake.  Improves latency.
## 0b 0110 000 0011  (decimal: 1539)
##    ||       ||^ Enable client-support
##    ||       |^ Enable server-support
##    ||       ^ Send TFO requests regardless of cookie-availability
##    |^ Accept TFO without cookies
##    ^ Enable TFO on all listening sockets
net.ipv4.tcp_fastopen=1539
net.ipv4.tcp_fastopen_key=b0ca13e1-3b777679-62fdfcf2-44af6bed
## Doesn't actually improve latency to enable.
## Should be left disabled, because enabling disables useful algorithms.
net.ipv4.tcp_low_latency=0
## Better latency
net.ipv4.tcp_thin_linear_timeouts=1
net.ipv4.tcp_thin_dupack=1

## Helps recover if primary address is lost
net.ipv4.conf.all.promote_secondaries=1
## Recover from lost packets faster
net.ipv4.tcp_early_retrans=3
## Helps recover some packets and such
net.ipv4.tcp_frto=1
net.ipv4.tcp_recovery=1

## Support for dynamic addresses
net.ipv4.ip_dynaddr=1
## Possibly useful.  *Might* break some things, though.
net.ipv4.ip_nonlocal_bind=1
## I don't really know what this is, but it's useful.  I think.
net.ipv4.tcp_l3mdev_accept=1

## Helps with connection-fidelity
net.ipv4.tcp_mtu_probing=1

## Compatibility with certain bugged devices.  Enabled by default and apparently harmless.
net.ipv4.tcp_retrans_collapse=1
## Compatibility with BSD and other devices.  Disabled=compatible.  No benefit to enabling.
net.ipv4.tcp_stdurg=0
## Probably an unnecessary workaround.
net.ipv4.tcp_workaround_signed_windows=1

## SACK-related features
net.ipv4.tcp_sack=1
net.ipv4.tcp_dsack=1
net.ipv4.tcp_fack=1

## Can give speed bonuses on some networks.  reuse is generally safer than recycle.  Don't use both.
net.ipv4.tcp_tw_reuse=1
net.ipv4.tcp_tw_recycle=0
